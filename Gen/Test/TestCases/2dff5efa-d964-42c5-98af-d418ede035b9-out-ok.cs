//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test2dff5efa_d964_42c5_98af_d418ede035b9
{
    using System;
    using CbOrm.Entity;
    using CbOrm.Storage;
    using CbOrm.Ref;
    using CbOrm.Meta;
    using System.Collections.Generic;
    
    
    public class P : CEntityObject
    {
        
        public static CbOrm.Meta.CTyp _P_TypM = new CbOrm.Meta.CTyp(typeof(P), new System.Guid("00000000-0000-0000-0000-000000000000"), P._GetProperties);
        
        private CSkalarRef<P, Guid> AcGuidM;
        
        private static CSkalarRefMetaInfo _AcGuidMetaInfoM = new CSkalarRefMetaInfo(typeof(P), nameof(AcGuid));
        
        private CSkalarRef<P, Guid> NcGuidM;
        
        private static CSkalarRefMetaInfo _NcGuidMetaInfoM = new CSkalarRefMetaInfo(typeof(P), nameof(NcGuid));
        
        private CR11CRef<P, C> AcM;
        
        private static CR11CRefMetaInfo _AcMetaInfoM = new CR11CRefMetaInfo(typeof(P), nameof(Ac));
        
        private CR11CRef<P, C> NcM;
        
        private static CR11CRefMetaInfo _NcMetaInfoM = new CR11CRefMetaInfo(typeof(P), nameof(Nc));
        
        public P(CStorage aStorage) : 
                base(aStorage)
        {
        }
        
        public static CbOrm.Meta.CTyp _P_Typ
        {
            get
            {
                return P._P_TypM;
            }
        }
        
        public override CbOrm.Meta.CTyp Typ
        {
            get
            {
                return P._P_Typ;
            }
        }
        
        [CbOrm.Attributes.CForeignKeyCounterpartTypeAttribute(typeof(P))]
        [CbOrm.Attributes.CForeignKeyCounterpartPropertyNameAttribute("Ac")]
        public CSkalarRef<P, Guid> AcGuid
        {
            get
            {
                if (Object.ReferenceEquals(this.AcGuidM, null))
                {
                    this.AcGuidM = new CSkalarRef<P, Guid>(this, P._AcGuidMetaInfo);
                }
                return this.AcGuidM;
            }
        }
        
        public static CSkalarRefMetaInfo _AcGuidMetaInfo
        {
            get
            {
                return P._AcGuidMetaInfoM;
            }
        }
        
        [CbOrm.Attributes.CForeignKeyCounterpartTypeAttribute(typeof(P))]
        [CbOrm.Attributes.CForeignKeyCounterpartPropertyNameAttribute("Nc")]
        public CSkalarRef<P, Guid> NcGuid
        {
            get
            {
                if (Object.ReferenceEquals(this.NcGuidM, null))
                {
                    this.NcGuidM = new CSkalarRef<P, Guid>(this, P._NcGuidMetaInfo);
                }
                return this.NcGuidM;
            }
        }
        
        public static CSkalarRefMetaInfo _NcGuidMetaInfo
        {
            get
            {
                return P._NcGuidMetaInfoM;
            }
        }
        
        public CR11CRef<P, C> Ac
        {
            get
            {
                if (Object.ReferenceEquals(this.AcM, null))
                {
                    this.AcM = new CR11CRef<P, C>(this, P._AcMetaInfo, C._Parent_P_AcMetaInfo);
                }
                return this.AcM;
            }
        }
        
        public static CR11CRefMetaInfo _AcMetaInfo
        {
            get
            {
                return P._AcMetaInfoM;
            }
        }
        
        [CbOrm.Attributes.CAutoCreateAttribute(false)]
        public CR11CRef<P, C> Nc
        {
            get
            {
                if (Object.ReferenceEquals(this.NcM, null))
                {
                    this.NcM = new CR11CRef<P, C>(this, P._NcMetaInfo, C._Parent_P_NcMetaInfo);
                }
                return this.NcM;
            }
        }
        
        public static CR11CRefMetaInfo _NcMetaInfo
        {
            get
            {
                return P._NcMetaInfoM;
            }
        }
        
        private static void _GetProperties(System.Action<CbOrm.Meta.CRefMetaInfo> aAddProperty)
        {
            aAddProperty.Invoke(P._AcGuidMetaInfo);
            aAddProperty.Invoke(P._NcGuidMetaInfo);
            aAddProperty.Invoke(P._AcMetaInfo);
            aAddProperty.Invoke(P._NcMetaInfo);
        }
    }
    
    public class C : CEntityObject
    {
        
        public static CbOrm.Meta.CTyp _C_TypM = new CbOrm.Meta.CTyp(typeof(C), new System.Guid("00000000-0000-0000-0000-000000000000"), C._GetProperties);
        
        private CR11PRef<C, P> Parent_P_AcM;
        
        private static CR11PRefMetaInfo _Parent_P_AcMetaInfoM = new CR11PRefMetaInfo(typeof(C), nameof(Parent_P_Ac));
        
        private CR11PRef<C, P> Parent_P_NcM;
        
        private static CR11PRefMetaInfo _Parent_P_NcMetaInfoM = new CR11PRefMetaInfo(typeof(C), nameof(Parent_P_Nc));
        
        public C(CStorage aStorage) : 
                base(aStorage)
        {
        }
        
        public static CbOrm.Meta.CTyp _C_Typ
        {
            get
            {
                return C._C_TypM;
            }
        }
        
        public override CbOrm.Meta.CTyp Typ
        {
            get
            {
                return C._C_Typ;
            }
        }
        
        public CR11PRef<C, P> Parent_P_Ac
        {
            get
            {
                if (Object.ReferenceEquals(this.Parent_P_AcM, null))
                {
                    this.Parent_P_AcM = new CR11PRef<C, P>(this, C._Parent_P_AcMetaInfo, P._AcGuidMetaInfo);
                }
                return this.Parent_P_AcM;
            }
        }
        
        public static CR11PRefMetaInfo _Parent_P_AcMetaInfo
        {
            get
            {
                return C._Parent_P_AcMetaInfoM;
            }
        }
        
        public CR11PRef<C, P> Parent_P_Nc
        {
            get
            {
                if (Object.ReferenceEquals(this.Parent_P_NcM, null))
                {
                    this.Parent_P_NcM = new CR11PRef<C, P>(this, C._Parent_P_NcMetaInfo, P._NcGuidMetaInfo);
                }
                return this.Parent_P_NcM;
            }
        }
        
        public static CR11PRefMetaInfo _Parent_P_NcMetaInfo
        {
            get
            {
                return C._Parent_P_NcMetaInfoM;
            }
        }
        
        private static void _GetProperties(System.Action<CbOrm.Meta.CRefMetaInfo> aAddProperty)
        {
            aAddProperty.Invoke(C._Parent_P_AcMetaInfo);
            aAddProperty.Invoke(C._Parent_P_NcMetaInfo);
        }
    }
    
    public class TestSchema : CbOrm.Schema.CSchema
    {
        
        public static TestSchema SingletonM = new TestSchema();
        
        private TestSchema()
        {
            this.AddTyp(P._P_TypM);
            this.AddTyp(C._C_TypM);
            this.Init();
        }
        
        public static TestSchema Singleton
        {
            get
            {
                return TestSchema.SingletonM;
            }
        }
        
        public static CbOrm.Schema.CSchema GetSingleton()
        {
            return TestSchema.SingletonM;
        }
    }
}
